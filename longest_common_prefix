/*
Write a function to find the longest common prefix string amongst an array of strings.
If there is no common prefix, return an empty string ""
*/
/*
Input: strs = ["flower","flow","flight"]
Output: "fl"

Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.
*/

/* C *
char * longestCommonPrefix(char ** strs, int strsSize){
    int i = 0;
    int j = 0;
    int min = strlen(strs[0]);
    char *result = NULL;
    for (i = 1; i < strsSize; i++) {
        if (strlen(strs[i]) < min) {
            min = strlen(strs[i]);
        }
    }
    result = (char*)malloc((min + 1) * sizeof(char));
    memset(result,'\0',(min + 1) * sizeof(char));
    for (i = 0; i < min; i++) {
        for (j = 0; j < strsSize; j++) {
            if (result[i] == 0) {
                result[i] = strs[j][i];
            } else {
                if (result[i] != strs[j][i]) {
                    result[i] = '\0';
                    return result;
                }
            }
        }
    }
     
    return result;
}

/* JAVA *
class Solution {


    public String longestCommonPrefix(String[] strs) {
        // Longest common prefix string
        StringBuilder longestCommonPrefix = new StringBuilder();
        // Base condition
        if (strs == null || strs.length == 0) {
            return longestCommonPrefix.toString();
        }
        // Find the minimum length string from the array
        int minimumLength = strs[0].length();
        for (int i = 1; i < strs.length; i++) {
            minimumLength = Math.min(minimumLength, strs[i].length());
        }
        // Loop for the minimum length
        for (int i = 0; i < minimumLength; i++) {
            // Get the current character from first string
            char current = strs[0].charAt(i);
            // Check if this character is found in all other strings or not
            for (String str : strs) {
                if (str.charAt(i) != current) {
                    return longestCommonPrefix.toString();
                }
            }
            longestCommonPrefix.append(current);
        }
        return longestCommonPrefix.toString();
    }


}
