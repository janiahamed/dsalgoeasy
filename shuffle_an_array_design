/*
Given an integer array nums, design an algorithm to randomly shuffle the array. All permutations of the array should be equally likely as a result of the shuffling.
Implement the Solution class:
Solution(int[] nums) Initializes the object with the integer array nums.
int[] reset() Resets the array to its original configuration and returns it.
int[] shuffle() Returns a random shuffling of the array.

*/
/*Input
["Solution", "shuffle", "reset", "shuffle"]
[[[1, 2, 3]], [], [], []]
Output
[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]

Explanation
Solution solution = new Solution([1, 2, 3]);
solution.shuffle();    // Shuffle the array [1,2,3] and return its result.
                       // Any permutation of [1,2,3] must be equally likely to be returned.
                       // Example: return [3, 1, 2]
solution.reset();      // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]
solution.shuffle();    // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]

*/
/* C */
#include <stdlib.h>
#include <string.h>

typedef struct {
    int* original;
    int* copy;
    int* temp;
    int length;
} Solution;

void swap(int* arr, int i, int j) {
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}

Solution* solutionCreate(int* nums, int numsSize) {
    Solution* obj = (Solution*)malloc(sizeof(Solution));
    obj->original = (int*)malloc(sizeof(int) * numsSize);
    obj->copy = (int*)malloc(sizeof(int) * numsSize);
    obj->temp = (int*)malloc(sizeof(int) * numsSize);
    obj->length = numsSize;
    
    memcpy(obj->original, nums, sizeof(int) * numsSize);
    memcpy(obj->copy, nums, sizeof(int) * numsSize);
    
    return obj;
}

int* solutionReset(Solution* obj, int* returnSize) {
    memcpy(obj->copy, obj->original, sizeof(int) * obj->length);
    *returnSize = obj->length;
    return obj->original;
}

int* solutionShuffle(Solution* obj, int* returnSize) {
    memcpy(obj->temp, obj->copy, sizeof(int) * obj->length);
    
    for (int i = 0; i < obj->length; i++) {
        int ra = obj->length - i;
        int j = i + rand() % ra;
        swap(obj->temp, i, j);
    }
    
    *returnSize = obj->length;
    return obj->temp;
}

void solutionFree(Solution* obj) {
    free(obj->original);
    free(obj->copy);
    free(obj->temp);
    free(obj);
}
/* JAVA */
class Solution {
    int[] original;
    int[] copy;
    Random rand = new Random();
    
    void swap(int i, int j) {
        int temp = copy[i];
        copy[i] = copy[j];
        copy[j] = temp;
    }
    public Solution(int[] nums) {
         copy = nums;
         original = nums.clone();
    }
    
    public int[] reset() {
        copy = original;
        original = original.clone();
        return original;
    }
    
    public int[] shuffle() {
        for (int i = 0; i < copy.length; i++) {
            int ra = copy.length-i;
            swap(i, (rand.nextInt(ra)+i));
        }    
        return copy;
    }
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(nums);
 * int[] param_1 = obj.reset();
 * int[] param_2 = obj.shuffle();
 */
