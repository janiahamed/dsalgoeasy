/*
Given the head of a singly linked list, return true if it is a palindrome or false otherwise.
*/
/*
Input: head = [1,2,2,1]
Output: true

Input: head = [1,2,2,1]
Output: true
*/

/* C */
struct ListNode *endoffirsthalf(struct ListNode *head) {
    struct ListNode *slow = head;
    struct ListNode *fast = head;
    while (fast->next != NULL && fast->next->next != NULL) {
        fast = fast->next->next;
        slow = slow->next;
    }
    return slow;
}

struct ListNode *reverselist(struct ListNode *head) {
    struct ListNode *curr = head;
    struct ListNode *prev = NULL;
    struct ListNode *next = NULL;
    while (curr != NULL) {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
    return prev;
}
bool isPalindrome(struct ListNode* head){

    
    if (head == NULL) return true;
    
    
    struct ListNode *firsthalfend = endoffirsthalf(head);
    struct ListNode *secondhalfstart = reverselist(firsthalfend->next);    
    struct ListNode* one = head;
    struct ListNode* two = secondhalfstart;
    while (two != NULL) {
        if (two->val == one->val) {
            two = two->next;
            one = one->next;
        } else {
            return false;
        }
    }

    firsthalfend->next = reverselist(secondhalfstart);
    return true;
}

/* JAVA */
class Solution {
    public ListNode reverselist (ListNode head) {
        ListNode curr = head;
        ListNode prev = null;
        ListNode next = null;
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
    
    public ListNode endfirst (ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while (fast.next != null && fast.next.next != null) {
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;
    }
    public boolean isPalindrome(ListNode head) {
        ListNode endoffirsthalf = endfirst(head);
        ListNode secondhalfstart = reverselist(endoffirsthalf.next);
        ListNode one = head;
        ListNode two = secondhalfstart;
        
        while (two != null) {
            if (one.val != two.val) return false;
            one = one.next;
            two = two.next;
        }
        
        endoffirsthalf.next = reverselist(secondhalfstart);
        return true;
    }
    
}
