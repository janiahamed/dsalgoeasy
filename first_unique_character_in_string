/* Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1. */
/* 
Input: s = "leetcode"
Output: 0

Input: s = "loveleetcode"
Output: 2

Input: s = "aabb"
Output: -1
*/

/* C */
int firstUniqChar(char * s){
    int count_map[26] = {0};
    int i = 0;
    for (i = 0; i < strlen(s); i++) {
        count_map[s[i]-'a']++;
    }
    for (i = 0; i < strlen(s); i++) {
        if (count_map[s[i]-'a'] == 1) return i;
    }
    return -1;
}

/* JAVA */
class Solution {
    public int firstUniqChar(String s) {
        int len = s.length();
        int count_map[] = new int[26];

        int  i = 0;
        for (i = 0; i < len; i++) {
            count_map[s.charAt(i)-'a']++;
        }
        for (i = 0; i < len; i++) {
            if (count_map[s.charAt(i)-'a'] == 1) return i;
        }
        return  -1;
    }
}
