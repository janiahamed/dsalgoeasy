/* Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result
must appear as many times as it shows in both arrays and you may return the result in any order.
1 <= nums1.length, nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 1000
*/
/* Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2] */
/* Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]
Explanation: [9,4] is also accepted. */

/* C */
int* intersect(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize) {
    // Count the frequency of each element in nums1
    int freq[1001] = {0}; // Assuming the maximum element value is 1000
    for (int i = 0; i < nums1Size; i++) {
        freq[nums1[i]]++;
    }

    int index = 0;
    for (int i = 0; i < nums2Size; i++) {
        if (freq[nums2[i]] > 0) {
            nums1[index++] = nums2[i];
            freq[nums2[i]]--;
        }
    }

    // Set the returnSize to the size of the result array
    *returnSize = index;
    return nums1;
}

/* JAVA */
class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
    Arrays.sort(nums1);
    Arrays.sort(nums2);
    int i = 0, j = 0, k = 0;
    while (i < nums1.length && j < nums2.length) {
        if (nums1[i] < nums2[j]) {
            ++i;
        } else if (nums1[i] > nums2[j]) {
            ++j;
        } else {
            nums1[k++] = nums1[i++];
            ++j;
        }
    }
    return Arrays.copyOfRange(nums1, 0, k);
    }
}
 
