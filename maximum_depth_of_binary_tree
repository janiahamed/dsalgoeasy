/*
Given the root of a binary tree, return its maximum depth.
A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
*/
/*
Input: root = [3,9,20,null,null,15,7]
Output: 3
Input: root = [1,null,2]
Output: 2
*/

/* C */
int max(int a, int b) {
    return (a > b) ? a : b;
}
int maxDepth(struct TreeNode* root){
    if (root == NULL) {
        return 0;
    }
    return max(1 + maxDepth(root -> left), 1 + maxDepth(root -> right));
    
}

/* JAVA */
class Solution {
    public int maxDepth(TreeNode root) {
        LinkedList<TreeNode> node = new LinkedList<TreeNode>();
        LinkedList<Integer> node_depth = new LinkedList<Integer>();
        int depth = 0;
        
        if (root == null) return 0;
        
        node.add(root);
        node_depth.add(1);
        
        while (!node.isEmpty()) {
            TreeNode current_node = node.pollLast();
            int current_node_depth = node_depth.pollLast();    
            if (current_node != null) {
                depth = Math.max(depth, current_node_depth);
                if (current_node.left != null) {
                    node.add(current_node.left);
                    node_depth.add(current_node_depth+1);
                }
                if (current_node.right != null) {
                    node.add(current_node.right);
                    node_depth.add(current_node_depth+1);
                }
            }
        }
        
        return depth;
    }
       
}
