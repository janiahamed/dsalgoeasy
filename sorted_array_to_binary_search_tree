/*
Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.
*/
/*
Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: [0,-10,5,null,-3,null,9] is also accepted:
Input: nums = [1,3]
Output: [3,1]
Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.
*/
/* C */
struct TreeNode* helper(int* nums, int left, int right) {
    if (left > right)
        return NULL;
    
    int middle = (left + right) / 2;
    struct TreeNode* result = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    result->val = nums[middle];
    result->left = helper(nums, left, middle - 1);
    result->right = helper(nums, middle + 1, right);
    
    return result;
}

struct TreeNode* sortedArrayToBST(int* nums, int numsSize) {
    return helper(nums, 0, numsSize - 1);
}

/*JAVA */
class Solution {
    int num[];
    public TreeNode helper(int left, int right) {
        if (left > right) return null;
        int middle = (left+right)/2;
        TreeNode result = new TreeNode(num[middle]);
        result.left = helper(left,middle-1);
        result.right = helper(middle+1,right);
        return result;
    }
    public TreeNode sortedArrayToBST(int[] nums) {
        this.num = nums;
        return helper(0,nums.length-1);
    }
}
