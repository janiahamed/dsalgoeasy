/* You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. 
The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.
Increment the large integer by one and return the resulting array of digits. */

/* Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4]. */
/* Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be [4,3,2,2]. */
/* Input: digits = [9]
Output: [1,0]
Explanation: The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be [1,0]. */

/* C */
int* plusOne(int* digits, int digitsSize, int* returnSize){
    int i = 0;
    int *return_arr = NULL;
    for (i = digitsSize-1; i >= 0; i-- ) {
        if (digits[i] == 9) digits[i] = 0;
        else {
            digits[i]+=1;
            *returnSize = digitsSize;
            return digits;
        }
    }
    return_arr = (int*)malloc((digitsSize+1)*sizeof(int));
    return_arr[0] = 1;
    for (i = 0; i <= digitsSize-1; i++ ) {
        return_arr[i+1] = digits[i]; 
    }
    *returnSize = digitsSize+1;
    return return_arr;
}

/* JAVA */
class Solution {
  public int[] plusOne(int[] digits) {
    int n = digits.length;

    /* move along the input array starting from the end */
    for (int idx = n - 1; idx >= 0; --idx) {
      /* set all the nines at the end of array to zeros */
      if (digits[idx] == 9) {
        digits[idx] = 0;
      }
      /* here we have the rightmost not-nine */
      else {
        /* increase this rightmost not-nine by 1 */
        digits[idx]++;
        /* and the job is done */
        return digits;
      }
    }
    /* we're here because all the digits are nines */
    digits = new int[n + 1];
    digits[0] = 1;
    return digits;
  }
}
