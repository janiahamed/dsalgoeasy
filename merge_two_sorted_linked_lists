/*
You are given the heads of two sorted linked lists list1 and list2.
Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.
Return the head of the merged linked list.
*/
/*
Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]
Input: list1 = [], list2 = [0]
Output: [0]
*/

/* C */
struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2){
    
    struct ListNode *dummy = (struct ListNode *)malloc(sizeof(struct ListNode));
    struct ListNode *curr = dummy;
   
    if (list1 == NULL) return list2;
    if (list2 == NULL) return list1;
    if (list1 == NULL && list2 == NULL) return NULL;
    while (list1!=NULL && list2!=NULL) {
        if (list1->val < list2->val) { 
            dummy->next = list1;
            dummy = dummy->next;
            list1 = list1->next;
        } else {
            dummy->next = list2;
            dummy = dummy->next;
            list2 = list2->next;
        }
    }
    while (list1 != NULL) {
        dummy->next = list1;
        dummy = dummy->next;
        list1 = list1->next;
    }
    while (list2 != NULL) {
        dummy->next = list2;
        dummy = dummy->next;
        list2 = list2->next;
    }
    return curr->next;
}

/* JAVA */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null) {
            return l2;
        }
        else if (l2 == null) {
            return l1;
        }
        else if (l1.val < l2.val) {
            l1.next = mergeTwoLists(l1.next, l2);
            return l1;
        }
        else {
            l2.next = mergeTwoLists(l1, l2.next);
            return l2;
        }

    }
}
