/* You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).
You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation. */

/* Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]] 

Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]*/

/* C */
void transpose(int** matrix, int row, int col) {
    int i = 0;
    int j = 0;
    for (i = 0; i < row; i++) {
        for (j = i+1; j < col; j++) {
            int temp = matrix[i][j];
            matrix[i][j] = matrix[j][i];
            matrix[j][i] = temp;
        }
    }
}
void reverse(int** matrix, int row, int col) {
    int i = 0;
    int j = 0;
    for (i = 0; i < row; i++) {
        for (j = 0; j < col/2; j++) {
            int temp = matrix[i][j];
            matrix[i][j] = matrix[i][col-j-1];
            matrix[i][col-j-1] = temp;
        }
    }
}
void rotate(int** matrix, int matrixSize, int* matrixColSize){
    transpose(matrix, matrixSize, matrixSize);
    reverse(matrix, matrixSize, matrixSize);
}
/* JAVA */
class Solution {
    public void transpose(int[][] matrix) {
        int i = 0;
        int j = 0;
        int temp = 0;
        for (i = 0; i < matrix.length; i++) {
            for (j = i+1; j < matrix[0].length; j++) {
                temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
    }
    
    public void reverse(int [][] matrix, int rows, int cols) {
        int i = 0;
        int temp = 0;
        int j = 0;
        for (i = 0; i < rows; i++) {
            for (j = 0; j < cols/2; j++) {
                temp = matrix[i][j];
                matrix[i][j] = matrix[i][cols-j-1];
                matrix[i][cols-j-1] = temp;
            }
        }
    }
    public void rotate(int[][] matrix) {
        transpose(matrix);
        reverse(matrix, matrix.length, matrix[0].length);
    }
}
