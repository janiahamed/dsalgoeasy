/*
Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.
*/
/*
Input: haystack = "sadbutsad", needle = "sad"
Output: 0
Explanation: "sad" occurs at index 0 and 6.
The first occurrence is at index 0, so we return 0.

Input: haystack = "leetcode", needle = "leeto"
Output: -1
Explanation: "leeto" did not occur in "leetcode", so we return -1.
*/

/* C */
int strStr(char * haystack, char * needle){
    int i = 0;
    int j = 0;
    int start = -1;
    while (i < strlen(haystack)) {
        if (haystack[i] == needle[j]) {
            if (start == -1) {
                start = i;
            }
            if (j == strlen(needle)-1) {
                return i-strlen(needle)+1;
            }
            i++;
            j++;
        }
        else {
            if (i == strlen(haystack)-1) {
                break;
            }
            i=start+1;
            start = i;
            j = 0;
        }
    }
    return -1;
}

/* JAVA */
class Solution {
    public int strStr(String haystack, String needle) {
        int m = needle.length();
        int n = haystack.length();

        for (int windowStart = 0; windowStart <= n - m; windowStart++) {
            for (int i = 0; i < m; i++) {
                if (needle.charAt(i) != haystack.charAt(windowStart + i)) {
                    break;
                }
                if (i == m - 1) {
                    return windowStart;
                }
            }
        }

        return -1;
    }
}
