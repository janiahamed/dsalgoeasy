/*
Given an integer n, return the number of prime numbers that are strictly less than n.
*/
/*
Input: n = 10
Output: 4
Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.

Input: n = 0
Output: 0

Input: n = 1
Output: 0
*/

/* C */
int countPrimes(int n){
    int i = 0;
    int j = 0;
    int count  = 0;
    
    if (n == 0) return 0;
     bool num[n];
    
    for (int i = 0 ; i < n; i++) {
        num[i] = false;
    }
    
    if (n < 2) return 0;
    for (i = 2; i <= (int)sqrt(n); i++) {
        if (num[i] == false) {
            for (j = i*i; j < (n) ;j+=i) {
                num[j] = true;
            }
        }
    }
    
    for (i = 2; i < n; i++) {
        if (num[i] == false) count++;
    }
    return count;
}

/* JAVA */
class Solution {
    public int countPrimes(int n) {
        if (n < 0) return 0;
        
        boolean num[] = new boolean[n];
        
        int count = 0;
        int i = 0;
        int j = 0;
        
        for (i = 0; i < n; i++) {
            num[i] = false;
        }
        
        for (i = 2; i <= (int)Math.sqrt(n); i++) {
            if (num[i] == false) {
                for (j = i*i; j < n; j+=i) {
                    num[j] = true;
                }
            }
        }
        
        for (i = 2; i < n; i++) {
            if (num[i] == false) count++;
        }
        return count;
    }
}
