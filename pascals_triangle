/*
Given an integer numRows, return the first numRows of Pascal's triangle.
In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:
*/
/*
Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]

Input: numRows = 1
Output: [[1]]
*/

/* C */
int** generate(int numRows, int* returnSize, int** returnColumnSizes){
  
    *returnSize = numRows;
    *returnColumnSizes = (int *)malloc(sizeof(int)*numRows); 
    int **result = (int **) malloc (sizeof(int *)*numRows);
    
    int i = 0;
    int j = 0;
    for (i = 0; i < numRows; i++) {
        (*returnColumnSizes)[i] = i+1;
        result[i] = (int *) malloc (sizeof(int)*(i+1));
        result[i][0] = 1;
        result[i][i] = 1;
        for (j = 1; j < i; j++) {
            result[i][j] = result[i-1][j-1]+result[i-1][j];
        }
    }
    return result;

}
   
/* JAVA */
class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        result.add(new ArrayList<Integer>());
        result.get(0).add(1);
        for (int i = 1; i < numRows; i++) {
            List<Integer> row = new ArrayList<Integer>();
            List<Integer> prevrow = result.get(i-1);
            row.add(1);
            for (int j = 1; j < i; j++) {
                row.add(prevrow.get(j-1)+prevrow.get(j));
            }
            row.add(1);
            result.add(row);
        }
        return result;
    }
}
